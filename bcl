###参数示例
##bcl_path: /data/novaseq/231013_A00602_0657_BHJNTHDSX7/Data/Intensities/BaseCalls
###index_type_path:/data/xujh/2023_10_12_zong/index
###runfold_path:/data/novaseq/231013_A00602_0657_BHJNTHDSX7
###PJ_name_path:/data/xujh/2023_10_12_zong/index/name.txt
###PJ_path:/data/xujh/2023_10_12_bcl_PJ_zong

{
  "bcl2fastq_to_report.index_type_path": "/data/bioinfo/xujh/chaifen_new/2023_9_9/index",
  "bcl2fastq_to_report.runfold_path": "/data/bioinfo/xujh/chaifen_old/2023_9_9/230909_A00602_0655_AHLCKFDRX3",
  "bcl2fastq_to_report.PJ_path": "/data/bioinfo/xujh/chaifen_new/2023_9_9_bcl_PJ",
  "bcl2fastq_to_report.PJ_name_path": "/data/bioinfo/xujh/chaifen_new/2023_9_9/index/name.txt",
  "bcl2fastq_to_report.bcl_path": "/data/bioinfo/xujh/chaifen_old/2023_9_9/230909_A00602_0655_AHLCKFDRX3/Data/Intensities/BaseCalls"
}





workflow bcl2fastq_to_report {
    String index_type_path
    String bcl_path
    String runfold_path
    String PJ_name_path
    String PJ_path

    call bcl2fastq {
        input:
            index_type_path=index_type_path,
            bcl_path=bcl_path,
            runfold_path=runfold_path
                       
    }

    call Project_sample {
        input:
            index_type_path=index_type_path,
            PJ_name_path = PJ_name_path,
            PJ_path=PJ_path,
            n=bcl2fastq.s
    }

    call fastp {
        input:
            index_type_path=index_type_path,
            PJ_name_path = PJ_name_path,
            PJ_path=PJ_path,
            n1=Project_sample.s1

    }
    call report {
        input:
            index_type_path=index_type_path,
            PJ_name_path = PJ_name_path,
            PJ_path=PJ_path,
            n2=fastp.s2
    }

    call sample_name {
        input:
            index_type_path=index_type_path,
            PJ_name_path = PJ_name_path,
            PJ_path=PJ_path,
            n3=report.s3
    }   

    call md5 {
        input:
            index_type_path=index_type_path,
            PJ_name_path = PJ_name_path,
            PJ_path=PJ_path,
            n4=sample_name.s4
    }
}


###将bcl进行拆分
task bcl2fastq {
    String index_type_path
    String bcl_path
    String runfold_path
    String z2="$"+"{"+"id"+"}"
    command {
        cd ${index_type_path}
        cat sample.txt|while read id;
        do /data/software/bin/bcl2fastq2/bin/bcl2fastq --input-dir ${bcl_path} --sample-sheet ${index_type_path}/${z2}/Sample_sheet.csv --output-dir ${index_type_path}/${z2}/raw_data --runfolder-dir ${runfold_path} -r 35 -p 35 -w 35 --no-lane-splitting 
        done
    }
    output{
        String s="${index_type_path}/raw_data"
    }
    runtime{
        continueOnReturnCode: true
    }
}


###将raw_data分配到每个项目名称里
task Project_sample{
    String index_type_path
    String PJ_name_path 
    String PJ_path
    String z="awk \'{print $1}\'"
    String z1="awk \'{print $2}\'"
    String z2="$"+"{"+"id"+"}"
    String z3="$"+"{"+"i"+"}"
    String n
    command {
        mkdir ${n}
        cd ${index_type_path}
        ${z} ${PJ_name_path} |sort|uniq|while read id;
        do mkdir  ${PJ_path}/${z2} ${PJ_path}/${z2}/00.RawData
        rm -rf ${index_type_path}/*/raw_data/Undetermined*
        grep ${z2} ${PJ_name_path}|${z1}|while read i;
        do mv ${index_type_path}/*/raw_data/${z3}_*  ${PJ_path}/${z2}/00.RawData
        done
        done
        
    }
    output{
        String s1="${PJ_path}/00.RawData"
    }
    runtime{
        continueOnReturnCode: true
    }
}

######对每个项目名称里的fq进行过滤
task fastp {
    String index_type_path
    String PJ_name_path
    String PJ_path
    String z="awk \'{print $1}\'"
    String z1="awk \'{print $2}\'"
    String z2="$"+"{"+"id"+"}"
    String z3="$"+"{"+"i"+"}"
    String n1
    command {
        mkdir ${n1}
        source activate /data/software/bin/miniconda/envs/bcl_report
        cd ${index_type_path}
        ${z} ${PJ_name_path}|sort|uniq|while read id; 
        do mkdir ${PJ_path}/${z2}/01.CleanData  ${PJ_path}/${z2}/02.QC ${PJ_path}/${z2}/02.QC/json_html 
        grep ${z2} ${PJ_name_path}|${z1}|while read i;
        do fastp -i ${PJ_path}/${z2}/00.RawData/${z3}_*R1* -I ${PJ_path}/${z2}/00.RawData/${z3}_*R2* -o ${PJ_path}/${z2}/01.CleanData/${z3}_clean_R1.fastq.gz -O ${PJ_path}/${z2}/01.CleanData/${z3}_clean_R2.fastq.gz -w 20 -j ${PJ_path}/${z2}/02.QC/json_html/${z3}.json -h ${PJ_path}/${z2}/02.QC/json_html/${z3}.html
        done
        done
    }

    output{
        String s2="${PJ_path}/01.CleanData"
    }
    runtime{
        continueOnReturnCode: true
    }
}

###产生报告
task report {
    String index_type_path
    String PJ_name_path
    String PJ_path
    String z="awk \'{print $1}\'"
    String z2="$"+"{"+"id"+"}"
    String n2
    command {
        mkdir ${n2}
        cd ${index_type_path}
        source activate /data/software/bin/miniconda/envs/bcl_report
        ${z} ${PJ_name_path} |sort|uniq|while read id;
        do  mkdir ${PJ_path}/${z2}/03.Report 
        python /data/bioinfo/xujh/report/final_report.py -in_dir ${PJ_path}/${z2}/02.QC/json_html -out_dir  ${PJ_path}/${z2}/03.Report  -html_path /data/bioinfo/xujh/report/report_template/final_report_template -report_title '测序以及数据质控'
        done

    }
    output{
        String s3="${PJ_path}/03.Report"
    }
    runtime{
        continueOnReturnCode: true
    }
}

###将每个fq按照相管给的结构进行归档
task sample_name {
    String index_type_path
    String PJ_name_path
    String PJ_path
    String z="awk \'{print $1}\'"
    String z1="awk \'{print $2}\'"
    String z2="$"+"{"+"id"+"}"
    String z3="$"+"{"+"i"+"}"
    String n3
    command {
        mkdir ${n3}
        cd ${index_type_path}
        ${z} ${PJ_name_path} |sort|uniq|while read id;
        do grep ${z2} ${PJ_name_path}|${z1}|while read i;
        do mkdir ${PJ_path}/${z2}/00.RawData/${z3} ${PJ_path}/${z2}/01.CleanData/${z3}
        mv ${PJ_path}/${z2}/00.RawData/${z3}_*.gz ${PJ_path}/${z2}/00.RawData/${z3}
        mv ${PJ_path}/${z2}/01.CleanData/${z3}_*.gz ${PJ_path}/${z2}/01.CleanData/${z3}
        done
        done
    }
    output{
        String s4="${PJ_path}/012.CleanData"
    }
    runtime{
        continueOnReturnCode: true
    }
}
###计算MD5
task md5 {
    String index_type_path
    String PJ_name_path
    String PJ_path
    String z="awk \'{print $1}\'"
    String z1="awk \'{print $2}\'"
    String z2="$"+"{"+"id"+"}"
    String n4
    command {
        mkdir ${n4}
        cd ${index_type_path}
        ${z} ${PJ_name_path} |sort|uniq|while read id;
        do cd ${PJ_path}/${z2}
        md5sum ./00.RawData/*/*.gz >${PJ_path}/${z2}/md5_raw.txt
        md5sum ./01.CleanData/*/*.gz > ${PJ_path}/${z2}/md5_clean.txt
        cat ${PJ_path}/${z2}/md5_raw.txt ${PJ_path}/${z2}/md5_clean.txt >${PJ_path}/${z2}/md5.txt
        rm -rf ${PJ_path}/${z2}/md5_raw.txt ${PJ_path}/${z2}/md5_clean.txt
        done
    
    }
    runtime{
        continueOnReturnCode: true
    }
}




